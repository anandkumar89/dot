global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

# Greek Letter
greek  = {
     "a" : "\\alpha",
     "b" : "\\beta",
     "c" : "\\chi",
     "d" : "\\delta",
     "e" : "\\epsilon",
     "ve": "\\varepsilon",
     "f" : "\\phi",
     "vf" : "\\varphi",
     "g" : "\\gamma",
     "h" : "\\eta",
     "i" : "\\iota",
     "j" : "\\varphi",
     "k" : "\\kappa",
     "vk": "\\varkappa",
     "l" : "\\lambda",
     "m" : "\\mu",
     "n" : "\\nu",
     "o" : "\\omicron",
     "p" : "\\pi",
     "vp" : "\\varpi",
     "q" : "\\theta",
     "vq" : "\\vartheta",
     "r" : "\\rho",
     "s" : "\\sigma",
     "vs" : "\\varsigma",
     "t" : "\\tau",
     "u" : "\\upsilon",
     "v" : "\\varpi",
     "w" : "\\omega",
     "x" : "\\xi",
     "y" : "\\psi",
     "z" : "\\zeta",
     "A" : "\\Alpha",
     "B" : "\\Beta",
     "C" : "\\Chi",
     "D" : "\\Delta",
     "E" : "\\Epsilon",
     "F" : "\\Phi",
     "G" : "\\Gamma",
     "H" : "\\Eta",
     "I" : "\\Iota",
     "K" : "\\Kappa",
     "L" : "\\Lambda",
     "M" : "\\Mu",
     "N" : "\\Nu",
     "O" : "\\Omicron",
     "P" : "\\Pi",
     "Q" : "\\Theta",
     "R" : "\\Rho",
     "S" : "\\Sigma",
     "T" : "\\Tau",
     "U" : "\\Upsilon",
     "W" : "\\Omega",
     "X" : "\\Xi",
     "Y" : "\\Psi",
     "Z" : "\\Zeta"
 };

## prefix
prefix = {
    "bar" : ["\\overline{"             ,"}"   ],
    "fn"  : ["\\overset{\\frown}{"   ,"}"   ],
    "td"  : ["\\widetilde{"            ,"}"   ],
    "mrm" : ["\\mathrm{"               ,"}"   ],
    "hat" : ["\\hat{"                  ,"}"   ],
    "cr"  : ["\\mathscr{"              ,"}"   ],
    "bav" : ["\\hat{\\boldsymbol{"   ,"}}"  ],
    "vec" : ["\\vec{"                  ,"}"   ],
    "bm"  : ["\\boldsymbol{"           ,"}"   ],
    "bf"  : ["\\mathbf{"               ,"}"   ],
    "cal" : ["\\mathcal{"              ,"}"   ],
    "dot"  : ["\\dot{"                  ,"}"   ],
    "vdot" : ["\\dot{\\boldsymbol{"   ,"}}"  ]
}

##  block
block = {
    "tm" : ["Thm"        ,"brown"  ,"▶",0],
    "tt" : ["Thm"        ,"brown"  ,"▶",1],
    "ex" : ["Ex"         ,"teal"   ,"▶",0],
    "pf" : ["Pf"         ,"green"  ,"▶",0],
    "pb" : ["Problem"    ,"teal"   ,"▶",0],
    "sn" : ["Sol"        ,"green"  ,"▶",0],
    "df" : ["Def"        ,"purple" ,"▶",0],
    "dd" : ["Def"        ,"purple" ,"▶",1],
    "st" : ["Step"       ,"orange" ,"▶",0],
    "md" : ["Method"     ,"brown"  ,"■",0],
    "cc" : ["Case"       ,"brown"  ,"●",0],
    "ds" : ["Discussion" ,"brown"  ,"■",0],
}

arrow = {
    'r' : 'right',
    'R' : 'Right',
    'l' : 'left',
    'L' : 'Left',
    'lr':'leftright',
    'Lr':'Leftright',
    'u' : 'up',
    'U' : 'Up',
    'd' : 'down',
    'D': 'Down',
    'ud':'updown',
    'Ud':'Updown',
    'rr': 'longright',
    'll': 'longleft',
    'RR': 'Longright',
    'LL': 'Longleft',
    'se': 'se',
    'sw': 'sw',
    'ne': 'ne',
    'nw': 'nw'
}

endglobal


# Basic Document template
snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

# External Computations
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet cite; "cite" wA
\\cite{$1} $0
endsnippet

snippet eqref; "eqref" wA
\\eqref{$1} $0 
endsnippet

snippet ref; "ref" wA
\\ref{$1} $0
endsnippet


snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet



snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

#Table, Figure, Enumerate, Itemize, Description, usepackage 
snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

# matrices and vectors
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet




snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

# TODO : Add eqn, spleqn with labels


# various dots 
priority 100
context "math()"
snippet ldo "ldots" iA
\\ldots
endsnippet

context "math()"
snippet cdo "cdots" iA
\\cdots
endsnippet

context "math()"
snippet vdo "vdots" iA
\\vdots
endsnippet

context "math()"
snippet ddo "ddots" iA
\\ddots
endsnippet

# Mathematical Logic 
context "math()"
snippet imply "implies" Ai
\implies
endsnippet

context "math()"
snippet iimply "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

# Fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# subscripts subscripts powers exponents
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet


context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet -- "subscript" iA
_{$1}$0
endsnippet


# priority 1000
# context "math()"
# snippet  '([A-Za-z]{1})([mnkijl])(\d)' "iterates" wrA
# `!p snip.rv = math.group(1)`_{`!p snip.rv = match.group(2)`+ `!p snip.rv=match.group(3)`} 
# endsnippet

snippet == "equals" iA
&= $1 \\\\ $0
endsnippet

snippet neq "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

# Brackets / Enclosures - Visual 
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

# Limits, limsup(d), liminf(d), sum(d), series and sequences 
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet `(?<!\\)(lim|sum)` "lim" riA
\\`!p snip.rv=match.group(1)`
endsnippet

context "math()"
snippet `(lim|limsup|liminf)d` "lim and limsup" riA
`!p snip.rv=match.group(1)`_{$1 \\to $2}$0
endsnippet

context "math()"
snippet `(int|bigcap|bigcup|sum)d` "sum and int" riA
`!p snip.rv=match.group(1)`_{$1}^{$2}
endsnippet

context "math()"
snippet `(?<=\\lim)[ ]?(inf|sup)` "limsup&liminf" riA
`!p snip.rv=match.group(1)`
endsnippet

context "math()"
snippet `(int|\\lim|\\sum)([a-ce-zA-CE-Z])` "space after int" riA
`!p snip.rv=match.group(1)+" "+match.group(2)`
endsnippet

# infinity, positive, negative
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet `\\inftyp` "+infty" riA
+\\infty
endsnippet

context "math()"
snippet `\\inftyn` "-infty" riA
-\\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet too "to" iA
\to 
endsnippet

context "math()"
snippet mto "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet


context "math()"
snippet cceq "subset" Ai
\subseteq 
endsnippet

context "math()"
snippet cc; "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

# mathbb symbols
snippet NN "n" iA
\N
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# # calligraphic 
# context "math()"
# snippet `([A-Z])cal` "calligraphic caps" riA
# \\mathcal{`!p snip.rv = group.match(1)`}
# endsnippet

# snippet uuu "bigcup" iA
# \bigcup_{${1:i \in ${2: I}}} $0
# endsnippet
# 
# snippet nnn "bigcap" iA
# \bigcap_{${1:i \in ${2: I}}} $0
# endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

# priority 10
# context "math()"
# snippet "bar" "bar" rA
# \overline{$1}$0
# endsnippet

# priority 100
# context "math()"
# snippet "([a-zA-Z])bar" "bar" riA
# \overline{`!p snip.rv=match.group(1)`}
# endsnippet

# priority 10
# context "math()"
# snippet "hat" "hat" rA
# \hat{$1}$0
# endsnippet

# priority 100
# context "math()"
# snippet "([a-zA-Z])hat" "hat" riA
# \hat{`!p snip.rv=match.group(1)`}
# endsnippet

# iterates & functions
context "math()"
snippet `([x-zuvf-hF-H]{1})([i-n\d])`  "xk" riA
`!p snip.rv=match.group(1)+"_"+match.group(2)`
endsnippet

priority 1000
context "math()"
snippet `([x-zuvf-hF-H]{1})_([i-n])(\d)`  "xk" riA
`!p snip.rv=match.group(1)+"_{"+match.group(2)+"+"+match.group(3) +"}"`
endsnippet

context "math()"
snippet xo "(x)" iA
(${1:x})
endsnippet

#context "math()"
#snippet st "^*" iA
#^\*
#endsnippet


# Greek Letters
context "math()"
snippet `[\\]?(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)` "greek" riA
\\`!p snip.rv=match.group(1)`
endsnippet

context "math()"
snippet `(?<![a-zA-Z])([a-zA-IK-UW-Z]|v[efkpqs]);` "greek" riA
`!p snip.rv=greek[match.group(1)];`
endsnippet



#### Binary Operation & Relation Symbols
#
# === ⇨ \equiv  ║     ≡
# sim ⇨ \sim    ║     ~
# cap ⇨ \cap    ║     ∩
# cup ⇨ \cup    ║     ∪
# in ⇨ \in      ║     ∈
# xx ⇨ \times   ║     ×
# opo ⇨ \oplus  ║     ⊕
# oxo ⇨ \otimes ║     ⊗
# omo ⇨ \ominus ║     ⊖
# oco ⇨ \propto ║     ∝


context "math()"
snippet eqv "xlongequal" iA
\\equiv
endsnippet

priority 1000
context "math()"
snippet `(sim|cap|cup|ni|perp|approx)` "exact ones" riA
\\`!p snip.rv=match.group(1)`
endsnippet

context "math()"
snippet inn "in" iA
\\in
endsnippet

context "math()"
snippet xx "times" iA
\\times
endsnippet

context "math()"
snippet opo "oplus" iA
\\oplus
endsnippet

context "math()"
snippet omo "oplus" iA
\\ominus
endsnippet

context "math()"
snippet oxo "otimes" iA
\\otimes
endsnippet

context "math()"
snippet oco "oplus" iA
\\propto
endsnippet

context "math()"
snippet `lsim` "≲" riA
`!p snip.rv='\\lesssim '`
endsnippet

context "math()"
snippet `gsim` "≳" riA
`!p snip.rv='\\gtrsim '`
endsnippet

# derivatives 
context "math()"
snippet DD "derivative" iA
\\frac{\\mathrm{d}$1}{\\mathrm{d}$2}
endsnippet

context "math()"
snippet PP "partial derivative" iA
\\frac{\\partial $1}{\\partial $2}
endsnippet

priority 200
context "math()"
snippet `(\w)?drm` "dif" riA
`!p snip.rv=match.group(1)?(match.group(1)+" "):""`\\mathrm{\\,d}
endsnippet

context "math()"
snippet `part` "partial" riA
`!p snip.rv="\\partial "`
endsnippet

# snippet part "d/dx" w
# \frac{\partial ${1:V}}{\partial ${2:x}} $0
# endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet




# Arrows 
priority 10
context "math()"
snippet `(r|R|l|L|lr|Lr|u|U|d|D|ud|Ud|rr|ll|RR|LL|se|sw|ne|nw)a;` "arrows" riA
`!p snip.rv="\\"+arrow[match.group(1)]+"arrow ";`
endsnippet

context "math()"
snippet `to` "to" riA
`!p snip.rv='\\to '`
endsnippet

# prefixes 
context "math()"
snippet `((?<![_\^])\d+|((?<![_\^])\d*)([A-Za-z]+|\\(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)[ ]?))(?<!\\)(bar|fn|td|mrm|hat|cr|bav|vec|bm|bf|cal|dot|vdt)` "prefix mode" riA
`!p
testPrefix = prefix[match.group(match.lastindex)];
snip.rv = testPrefix[0] + match.group(1) + testPrefix[1];
`
endsnippet

priority 100
context "math()"
snippet `((?<![_\^])\d+|(?:(?<![_\^])\d*)(?:[A-Za-z]+|\\(?:alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)[ ]?)[']*)(((\^|_)(\{\w+\}|\w))+)(?<!\\)(bar|fn|td|mrm|hat|cr|bav|vec|bm|bf|cal|dot|vdt)` "prefix mode" riA
`!p
testPrefix = prefix[match.group(match.lastindex)];
snip.rv = testPrefix[0] + match.group(1) + testPrefix[1]+match.group(2);
`
endsnippet


# Commonly used
context "math()"
snippet gra "nabla / gradient" iA
\\nabla
endsnippet


# vim:ft=snippets
